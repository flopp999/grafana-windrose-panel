{"version":3,"sources":["../src/gradient.js"],"names":["angular","module","factory","gradients","minNum","maxNum","colours","setSpectrum","setColours","arguments","setSpectrumByArray","array","colourAt","number","isNaN","TypeError","length","segment","index","Math","min","floor","max","setNumberRange","minNumber","maxNumber","RangeError","spectrum","Error","increment","firstGradient","ColourGradient","setGradient","i","colorGradient","startColour","endColour","colourStart","colourEnd","getHexColour","calcHex","substring","channelStart_Base16","channelEnd_Base16","num","numRange","cStart_Base10","parseInt","cEnd_Base10","cPerUnit","c_Base10","round","formatHex","toString","hex","isHexColour","string","regex","test"],"mappings":"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","file":"gradient.js","sourcesContent":["angular.module('grafana.services').factory('Rainbow', function () {\n    var gradients = null;\n    var minNum = 0;\n    var maxNum = 100;\n    var colours = ['ff0000', 'ffff00', '00ff00', '0000ff'];\n\n    return {\n        setSpectrum: function () {\n            setColours(arguments);\n            return this;\n        },\n        setSpectrumByArray: function (array) {\n            setColours(array);\n            return this;\n        },\n        colourAt: function (number) {\n            if (isNaN(number)) {\n                throw new TypeError(number + ' is not a number');\n            } else if (gradients.length === 1) {\n                return gradients[0].colourAt(number);\n            } else {\n                var segment = (maxNum - minNum)/(gradients.length);\n                var index = Math.min(Math.floor((Math.max(number, minNum) - minNum)/segment), gradients.length - 1);\n                return gradients[index].colourAt(number);\n            }\n        },\n        setNumberRange: function (minNumber, maxNumber) {\n            if (maxNumber > minNumber) {\n                minNum = minNumber;\n                maxNum = maxNumber;\n                setColours(colours);\n            } else {\n                throw new RangeError('maxNumber (' + maxNumber + ') is not greater than minNumber (' + minNumber + ')');\n            }\n            return this;\n        }\n    };\n\n    function setColours (spectrum) {\n        if (spectrum.length < 2) {\n            throw new Error('Rainbow must have two or more colours.');\n        } else {\n            var increment = (maxNum - minNum)/(spectrum.length - 1);\n            var firstGradient = ColourGradient();\n            firstGradient.setGradient(spectrum[0], spectrum[1]);\n            firstGradient.setNumberRange(minNum, minNum + increment);\n            gradients = [ firstGradient ];\n\n            for (var i = 0; i < spectrum.length - 1; i++) {\n                var colorGradient = ColourGradient();\n                colorGradient.setGradient(spectrum[i], spectrum[i + 1]);\n                colorGradient.setNumberRange(minNum + increment * i, minNum + increment * (i + 1));\n                gradients[i] = colorGradient;\n            }\n            colours = spectrum;\n        }\n    }\n\n    function ColourGradient () {\n        var startColour = 'ff0000';\n        var endColour = '0000ff';\n        var minNum = 0;\n        var maxNum = 100;\n\n        return {\n            setGradient: function (colourStart, colourEnd) {\n                startColour = getHexColour(colourStart);\n                endColour = getHexColour(colourEnd);\n            },\n            setNumberRange: function (minNumber, maxNumber) {\n                if (maxNumber > minNumber) {\n                    minNum = minNumber;\n                    maxNum = maxNumber;\n                } else {\n                    throw new RangeError('maxNumber (' + maxNumber + ') is not greater than minNumber (' + minNumber + ')');\n                }\n            },\n            colourAt: function (number) {\n                return calcHex(number, startColour.substring(0,2), endColour.substring(0,2))\n                    + calcHex(number, startColour.substring(2,4), endColour.substring(2,4))\n                    + calcHex(number, startColour.substring(4,6), endColour.substring(4,6));\n            }\n        };\n\n        function calcHex(number, channelStart_Base16, channelEnd_Base16) {\n            var num = number;\n            if (num < minNum) {\n                num = minNum;\n            }\n            if (num > maxNum) {\n                num = maxNum;\n            }\n            var numRange = maxNum - minNum;\n            var cStart_Base10 = parseInt(channelStart_Base16, 16);\n            var cEnd_Base10 = parseInt(channelEnd_Base16, 16);\n            var cPerUnit = (cEnd_Base10 - cStart_Base10)/numRange;\n            var c_Base10 = Math.round(cPerUnit * (num - minNum) + cStart_Base10);\n            return formatHex(c_Base10.toString(16));\n        }\n\n        function formatHex(hex) {\n            if (hex.length === 1) {\n                return '0' + hex;\n            } else {\n                return hex;\n            }\n        }\n\n        function isHexColour(string) {\n            var regex = /^#?[0-9a-fA-F]{6}$/i;\n            return regex.test(string);\n        }\n\n        function getHexColour(string) {\n            if (isHexColour(string)) {\n                return string.substring(string.length - 6, string.length);\n            } else {\n                throw new Error(string + ' is not a valid colour.');\n            }\n        }\n    }\n});\n"]}